// Nexus Res-Q Firestore Security Rules
// Production-ready security rules with role-based access control

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/clients/$(getClientSubdomain())/users/$(request.auth.uid)).data;
    }
    
    function getClientSubdomain() {
      return request.auth.token.clientSubdomain;
    }
    
    function hasRole(role) {
      return isAuthenticated() && getUserData().role == role;
    }

    function hasAnyRole(roles) {
      return isAuthenticated() && getUserData().role in roles;
    }

    function isAdminOrManager() {
      return isAuthenticated() && getUserData().role in ['admin', 'manager'];
    }

    function canManageUsers() {
      return isAuthenticated() && getUserData().role in ['admin', 'manager'];
    }

    function canManageAssets() {
      return isAuthenticated() && getUserData().role in ['admin', 'manager', 'user'];
    }
    
    function isActiveUser() {
      return isAuthenticated() && getUserData().active == true;
    }
    
    function isOwnerOrAdmin(userId) {
      return isAuthenticated() && (
        request.auth.uid == userId || 
        hasRole('admin') || 
        hasRole('nexus')
      );
    }
    
    function belongsToUserClient(clientSubdomain) {
      return isAuthenticated() && getClientSubdomain() == clientSubdomain;
    }
    
    // Global collections (read-only for authenticated users)
    match /asset_types/{document} {
      allow read: if isAuthenticated() && isActiveUser();
      allow write: if hasRole('nexus');
    }
    
    match /questionTemplates/{document} {
      allow read: if isAuthenticated() && isActiveUser();
      allow write: if hasRole('nexus');
    }
    
    // Client-specific data
    match /clients/{clientSubdomain} {
      // Client root document
      allow read: if isAuthenticated() && (
        belongsToUserClient(clientSubdomain) || 
        hasRole('nexus')
      );
      allow write: if hasRole('nexus') || (
        hasRole('admin') && belongsToUserClient(clientSubdomain)
      );
      
      // Client users collection
      match /users/{userId} {
        allow read: if isAuthenticated() && (
          belongsToUserClient(clientSubdomain) ||
          hasRole('nexus')
        );
        allow create: if canManageUsers() && belongsToUserClient(clientSubdomain);
        allow update: if (
          (request.auth.uid == userId && belongsToUserClient(clientSubdomain)) ||
          (canManageUsers() && belongsToUserClient(clientSubdomain)) ||
          hasRole('nexus')
        );
        allow delete: if hasRole('admin') && belongsToUserClient(clientSubdomain);
      }
      
      // Client assets collection
      match /assets/{assetId} {
        allow read: if isAuthenticated() && isActiveUser() && (
          belongsToUserClient(clientSubdomain) ||
          hasRole('nexus')
        );
        allow create, update: if canManageAssets() && belongsToUserClient(clientSubdomain);
        allow delete: if isAdminOrManager() && belongsToUserClient(clientSubdomain);
      }
      
      // Client locations collection
      match /locations/{locationId} {
        allow read: if isAuthenticated() && isActiveUser() && (
          belongsToUserClient(clientSubdomain) ||
          hasRole('nexus')
        );
        allow write: if isAdminOrManager() && belongsToUserClient(clientSubdomain);
      }
      
      // Client inspection records
      match /inspectionRecords/{inspectionId} {
        allow read: if isAuthenticated() && isActiveUser() && (
          belongsToUserClient(clientSubdomain) || 
          hasRole('nexus')
        );
        allow create: if isAuthenticated() && isActiveUser() && 
          belongsToUserClient(clientSubdomain);
        allow update: if (hasRole('admin') || hasRole('manager')) && 
          belongsToUserClient(clientSubdomain);
      }
      
      // Client assignments
      match /assignments/{assignmentId} {
        allow read, write: if isAuthenticated() && isActiveUser() && (
          belongsToUserClient(clientSubdomain) || 
          hasRole('nexus')
        );
      }
      
      // Client logs (read-only for users, write for system)
      match /logs/{logId} {
        allow read: if isAuthenticated() && (
          belongsToUserClient(clientSubdomain) || 
          hasRole('nexus')
        );
        allow create: if isAuthenticated() && belongsToUserClient(clientSubdomain);
        allow update, delete: if hasRole('nexus');
      }
      
      // Client-specific asset types and question templates
      match /asset_types/{typeId} {
        allow read: if isAuthenticated() && isActiveUser() && (
          belongsToUserClient(clientSubdomain) || 
          hasRole('nexus')
        );
        allow write: if (hasRole('admin') || hasRole('manager')) && 
          belongsToUserClient(clientSubdomain);
      }
      
      match /questionTemplates/{templateId} {
        allow read: if isAuthenticated() && isActiveUser() && (
          belongsToUserClient(clientSubdomain) || 
          hasRole('nexus')
        );
        allow write: if (hasRole('admin') || hasRole('manager')) && 
          belongsToUserClient(clientSubdomain);
      }
      
      // Messaging system
      match /messages/{messageId} {
        allow read: if isAuthenticated() && (
          belongsToUserClient(clientSubdomain) || 
          hasRole('nexus')
        );
        allow create: if isAuthenticated() && isActiveUser() && 
          belongsToUserClient(clientSubdomain);
        allow update: if hasRole('nexus') || (
          hasRole('admin') && belongsToUserClient(clientSubdomain)
        );
      }
    }
    
    // Global messaging for Nexus users
    match /nexus_messages/{messageId} {
      allow read, write: if hasRole('nexus');
      allow create: if isAuthenticated() && isActiveUser();
    }
    
    // System logs (Nexus only)
    match /system_logs/{logId} {
      allow read, write: if hasRole('nexus');
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
